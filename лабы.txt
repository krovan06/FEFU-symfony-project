3)
1.  
сущность = модель в Django. Поля этого класса соответствуют колонкам таблицы, а каждая строка в таблице соответствует объекту сущности.

В ORM (например, Doctrine) связь осуществляется через аннотации или атрибуты в PHP-классе, которые указывают, какие поля должны быть записаны в таблицу.

Создание осуществляется через php bin/console make:entity.

Репозиторий (Repository) — это класс, который управляет выборками данных из БД. Он связан с сущностью через EntityManager и предоставляет методы для поиска, фильтрации и получения данных.

2. 
Миграция — это способ версионного управления схемой БД, который позволяет вносить изменения в структуру таблиц (добавлять, изменять, удалять колонки).

php bin/console make:migration
php bin/console doctrine:migrations:migrate


3.
CRUD (Create, Read, Update, Delete) — набор операций для работы с данными.

php bin/console make:crud Product

Это создаст:
Контроллер с методами для управления записями.
Форму для добавления/редактирования.
Twig-шаблоны.

4.
Форма (<form>) в HTML используется для ввода и отправки данных.
Тип формы (Type)
Класс, который определяет поля формы. 

5.
Twig — это шаблонизатор Symfony. Он позволяет использовать переменные, условия, циклы.


6.
MVC (Model-View-Controller) — паттерн проектирования.

Model (Модель) — сущности (Doctrine).
View (Представление) — шаблоны (Twig).
Controller (Контроллер) — обработка логики.
Symfony реализует MVC через контроллеры, Doctrine ORM и Twig.



I. 
EntityManager — это сервис Doctrine, который управляет жизненным циклом сущностей (сохранение, обновление, удаление).

Пример использования:

$entityManager = $this->getDoctrine()->getManager();
$entityManager->persist($product);
$entityManager->flush();

Отличие от репозитория:

EntityManager управляет транзакциями и изменениями.
Репозиторий используется только для получения данных.

II. Для чего в миграции нужны методы up и down?
up() — выполняет изменения (например, создание таблицы).
down() — откатывает изменения.

III. 
CSRF (Cross-Site Request Forgery) — атака, при которой злоумышленник выполняет запросы от имени пользователя.
XSS — выполнение вредоносного JS-кода.
SQL-инъекция — внедрение вредных SQL-запросов.
CSRF — подделка пользовательских запросов.

В Symfony: Doctrine автоматически защищает от SQL-инъекций.

Если в базе хранится неэкранированный HTML-код, злоумышленник может вставить:

<script>alert('Вы взломаны!');</script>

И при выводе на страницу этот код выполнится.
Но Twig по умолчанию экранирует вывод

4)
1.
Security Bundle в Symfony — это встроенный механизм для управления аутентификацией и авторизацией пользователей.

providers — Определяет, где искать пользователей

firewall — Настраивает аутентификацию
form_login — включает аутентификацию через форму.
logout — конфигурация выхода пользователя.

access_control:
    - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: ^/profile, roles: ROLE_USER }

2.
Профилировщик Symfony — инструмент для отладки запросов, производительности и безопасности.
Функции, появляющиеся после установки symfony/profiler-pack
После установки:

Внизу каждой страницы появляется панель отладки.
Можно просматривать запросы, маршруты, SQL-запросы, кеш, логи и авторизацию.
Доступен по /_profiler.

3.
Сущность User нужна для хранения информации о пользователях (логин, пароль, роли).
php bin/console make:user

Symfony создаст App\Entity\User:

Особенность	Обычная сущность	User
Интерфейсы	Нет			UserInterface
Поле roles	Нет			Да (массив)
Поле password	Опционально		Обязательно

4.
php bin/console make:registration-form
После этого появляются файлы:

Form/RegistrationFormType.php — форма для регистрации.
Controller/RegistrationController.php — обработка формы.
templates/registration/register.html.twig — шаблон формы.

5.
php bin/console make:auth
После генерации появляются файлы:

Security/LoginFormAuthenticator.php — обработчик аутентификации.
Controller/SecurityController.php — контроллер входа/выхода.
templates/security/login.html.twig — шаблон логина.

6.
Права определяют, что пользователь может делать.

Выдача прав пользователю
Добавляем роль админа:

$user->setRoles(['ROLE_ADMIN']);
$entityManager->flush();

Настройка доступа в security.yaml

access_control:
    - { path: ^/admin, roles: ROLE_ADMIN }
Теперь /admin доступен только администраторам.

I

Термин		Описание
Идентификация	Определение личности (например, ввод логина)
Аутентификация	Проверка личности (например, ввод пароля)
Авторизация	Определение прав доступа (например, проверка ROLE_ADMIN)


ВЫВОД ЕПТЫ
SecurityBundle управляет пользователями и доступом.
Profiler помогает анализировать производительность.
User — это особая сущность с ролями и паролем.
Форма регистрации создаётся через make:registration-form.
Форма входа — через make:auth.
Роли пользователей управляют доступом.
UPDATE user SET roles = '["ROLE_ADMIN"]' WHERE id = 1;
